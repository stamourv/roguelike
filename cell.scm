(define-class cell ()
  (slot: objects)
  (slot: occupant)) ; player, monster, ...

(define (add-object cell object)
  (cell-objects-set! cell (cons object (cell-objects cell))))
(define (remove-object cell object)
  (cell-objects-set! cell (remove object (cell-objects cell))))

(define-generic walkable-cell?)
(define-method (walkable-cell? c) #f)
(define (free-cell? cell)
  (and (walkable-cell? cell)
       (not (cell-occupant cell))))

(define-generic opaque-cell?)
(define-method (opaque-cell? c) #f)


(define (walkable-cell-print cell char)
  (cond ((cell-occupant cell)
	 => print)
	((not (null? (cell-objects cell)))
	 (print (car (cell-objects cell))))
	(else char)))


(define-class empty-cell (cell))
(define (new-empty-cell) (make-empty-cell '() #f))
(define-method (print (c empty-cell)) (walkable-cell-print c #\space))
(define-method (walkable-cell? (c empty-cell)) #t)


(define-class stairs (empty-cell))
(define-class stairs-up   (stairs))
(define (new-stairs-up)   (make-stairs-up   '() #f))
(define-method (print (c stairs-up)) (walkable-cell-print c #\<))
(define-class stairs-down (stairs))
(define (new-stairs-down) (make-stairs-down '() #f))
(define-method (print (c stairs-up)) (walkable-cell-print c #\>))

(define-class wall (cell))
(define-method (print (c wall)) #\+)
(define-method (opaque-cell? (c wall)) #t)
(define-class vertical-wall   (wall))
(define (new-vertical-wall)   (make-vertical-wall   '() #f))
(define-method (print (c vertical-wall))   #\|)
(define-class horizontal-wall (wall))
(define (new-horizontal-wall) (make-horizontal-wall '() #f))
(define-method (print (c horizontal-wall)) #\-)
(define-class corner-wall     (wall))
(define (new-corner-wall)     (make-corner-wall     '() #f))
(define-class solid-wall      (wall))
(define (new-solid-wall)      (make-solid-wall      '() #f))
(define-class pillar          (wall))
(define (new-pillar)          (make-pillar          '() #f))


(define-generic open)
(define-method (open  grid x opener) (display "I can't open that.\n"))
(define-generic close)
(define-method (close grid x closer) (display "I can't close that.\n"))


;; TODO other symbols ? silly for horizontal doors. if wall ever end up all being #, use - and |, or maybe for now use $ and _ for vertical doors and _ and something else for horizontal TODO see on the web what other people use
(define-class door (cell)
  (slot: open?))
(define (new-door) (make-door '() #f #f))
(define-method (print (c door))
  (if (door-open? c)
      (walkable-cell-print c #\_)
      #\$))
(define-method (open grid (door door) opener)
  (if (door-open? door)
      (display "This door is already open.\n")
      (begin (door-open?-set! door #t)
	     (display "Door opened.\n"))))
(define-method (close grid (door door) closer)
  (if (not (door-open? door))
      (display "This door is already closed.\n")
      (begin (door-open?-set! door #f)
	     (display "Door closed.\n"))))
(define-method (walkable-cell? (c door))      (door-open? c))
(define-method (opaque-cell?   (c door)) (not (door-open? c)))


(define-class chest (cell)
  (slot: open?))
(define (new-chest contents) (make-chest contents #f #f))
(define-method (print (c chest))
  (if (chest-open? c)
      (walkable-cell-print c #\=)
      #\#))
(define-method (open grid (chest chest) opener)
  (if (chest-open? chest)
      (display "This chest is already open.\n")
      (begin (chest-open?-set! chest #t)
	     (display "Chest opened.\n"))))
(define-method (walkable-cell? (c chest)) (chest-open? c))
